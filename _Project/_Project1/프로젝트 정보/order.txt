어플리케이션 주제에 대한 탐구 및 공유
 > 어떠한 서비스를 누구에게 제공하는가? 목표 방향 설정
 > 요구사항 도출 및 분석
 > 유스케이스 다이어그램 활용

----------------------------

어플리케이션에서 다뤄야 할 데이터 파악
> 데이터 흐름 파악하기
> 데이터의 유효 기간(어느 데이터가 언제 생성되고 얼마만큼 지속되어야 하는지)
> 데이터의 규모
> ERD 등 활용

> 데이터 수집이 필요한 경우 어떻게?
> Data API 탐색

-----------------------------

논리적 흐름 구성
> 시퀀스 다이어그램 / 액티비티 다이어그램 등 활용

-----------------------------

기능적 계획 / 기술적 계획
1. 재사용이 필요한 부분 찾기
2. 외부 자원(그림 파일 등)의 사용
 2-1. 만들어 쓸 것인지
 2-2. 있는 걸 가져다가 쓸 것인지
3. 라이브러리 공유 방법

-----------------------------

GUI 및 데이터 연동 설명

-----------------------------

팀원과 협업 과정 / 팀원 책임 영역 결정 / 회의
	> 인간의 두뇌는 한 번에 특정 양의 세부 사항에만 집중할 수 있습니다
회의는 어떻게 어디서 언제
조원별 분업은 어떻게
오더 진행사항 확인은 어떻게
	> 작업물을 검토할 수 있는 사람이 없습니다
	> 문제의 발견은 어떻게?
	> 팀원의 구현 과정이 진행되지 않는 경우는?
조원 작업물 병합 방법은
문제(오류, 결함, 이슈, 새 요청사항 등) 발견시 관리는 어떤 방식으로
	> 잘못된 코드에 대해 더 많은 코드가 작성됨
	> 잠재적 문제의 빠른 파악을 위해서는?
테스트 및 배포는?
	> 가는 말(입력)이 고와야 오는 말(출력)이 곱다.
	> 사용자의 유효하지 않은 입력에 대해 프로그램을 보호하세요.
수정/개선 작업은 누가 언제 어떻게
대기시간이 생기는 경우는 어떻게
(작업/최종 마무리) 시간 배분은 어떻게

---
### tip
회의 내용을 적용하여 프로그램을 미리 작성해보는 시간을 가져봄
	> 최소량의 코드로 간단하게 작성하여 협업을 수행
	> 회의 내용의 작업 방식이 효과가 있을지 정말로 알 수 없습니다
팀원간 피드백하여 과정 개선
	> 많은 프로젝트는 고도로 반복적이어야 하며 일부는 더 순차적이어야 합니다
	> 요구 사항을 놓쳤을 수 있습니다
